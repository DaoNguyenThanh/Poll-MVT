DATABASE_URL="ENGINE://USER:PASSWORD@HOST:PORT/DATABASE"
SLACK_USER_TOKEN=xoxp-4174455856583-4188930215603-4239452739856-e6f2be4e7a2a922e7fe59e25193ede1e
SLACK_BOT_TOKEN=xoxb-4174455856583-4212120764341-ol35EM6k9HArkTIwYVjiJOKI

.form-container.sign-up-container
            form.frm-sign(action='#')
                h1.title-sign Create Account
                .social-container
                    a.social(href='#')
                        i.fab.fa-facebook-f
                    a.social(href='/login/federated/google')
                        i.fab.fa-google-plus-g
                    a.social(href='#')
                        i.fab.fa-linkedin-in
                span or use your email for registration
                input.ip(type='email' placeholder='Email' required='')
                input.ip(type='password' placeholder='Password' required='')
                button.btn-sign Sign Up

# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

PollWebsite / prima / .env
DATABASE_URL="mysql://root:12345678@localhost:3306/web-poll"

GOOGLE_CLIENT_ID=914176792303-u3clb1ifv24n369jots7ko0lnmjbrh2g.apps.googleusercontent.com
# GOOGLE_CLIENT_SECRET=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
SLACK_TOKEN=xoxp-4174455856583-4542826968518-4540277858439-0ecf2a52b4c8fb3af04f8d2bc43849bf
SLACK_BOT_TOKEN=xoxb-4174455856583-4548221733238-jxSGtzSN8VjvTGJv32y7dWmT

- const totalVotes= val.answers._count.users.map((total, n) => {total += n;}, 0 )
                  p= val.answers._count.users
img.avatar(src= `${item.avatar}` alt='Avatar')
-
    let item = [
        {
            "id": "login",
            "icon": "fas fa-sign-in-alt",
        },
        {
            "id": "love",
            "icon": "fas fa-heart",
        },
        {
            "id": "community",
            "icon": "fas fa-users",
        },
        {
            "id": "photography",
            "icon": "fas fa-camera",
        },
        {
            "id": "communication",
            "icon": "fas fa-comment-alt",
        },
        {
            "id": "call",
            "icon": "fas fa-phone",
        },
    ]

#container 

    h2 Achievement-Box

    .content

        each id, i in item
            .achievement
                .bar
                    .img-box
                        i(class="" + item[i].icon + "")
                    .progress(class="" + item[i].id + "")
                    p 
                        span(class="" + item[i].id + "-counter")
                            | 0
                        | /5 
                        =item[i].id
    
#button-bar 
    each achievement, i in ['login', 'love', 'community', 'photography', 'communication', 'call']
        button(name="" + item[i].id + "" title="click to fill item-achievement bar")
            i(class="" + item[i].icon + "")

let i = 0;
progress.forEach( function() {

    progress[i].addEventListener( "click", function() {

        // let getSelection = this.getAttribute("name");
        // let setSelection = document.querySelector("." + getSelection);
        // let getCounter = document.querySelector("." + getSelection).textContent;
        let getSelection = document.getElementsByName("vote-act");
        let setSelection = document.querySelector("." + getSelection);
        let getCounter = document.querySelector("." + getSelection + "-counter").textContent;
        let setCounter = Number.parseInt(getCounter) + 1;

        let currentWidth = setSelection.style.width;
        let newWidth = Number.parseInt(currentWidth) + 20;

        setSelection.classList.add("running");
        document.querySelector(".cover-ans").classList.add("running");

        setTimeout(() => {
            setSelection.classList.remove("running");
            document.querySelector(".cover-ans").classList.add("running");
        }, 1000);

        if ( isNaN(newWidth) ) {
            setSelection.style.width = "20%";
        } else {
            if ( newWidth <= 100) {
                setSelection.style.width = newWidth + "%";
            } else {
                setSelection.style.width = "0%";
                setCounter = 0;
            }
        };

        setSelection.getAttribute("style");
        document.querySelector("." + getSelection + "-counter").textContent = setCounter;
    })

    ++i;

})


.bar
  .myProgress
    .progess 
        span(class='counter')
        | 0%


.bar {
  margin-top: 10px;
  position: relative;
  display: flex;
  align-items: center;
  width: 100%;
  height: 30px;
  background-color: rgba(15, 15, 15, 0.05);
  border-radius: 40px;
  overflow: hidden;
  border: 1px solid;
}

.myProgress {
  margin: 10px 0px;
  border: 1px solid #000000;
  position: absolute;
  top: 0;
  left: 0;
  width: 40px;
  height: 100%;
  background: linear-gradient(30deg, #64a9ff, #93ffa0);
  border-radius: 20px;
  transition: 1s ease;
  display: flex;
  align-items: center;
  position: relative;
}

.progress {
  width: 0%;
  height: 30px;
  background-color: #04AA6D;
  text-align: center;
  line-height: 30px;
  color: rgb(20, 50, 223);
  font-weight: bold;
}

.progress.running {
  animation-name: fill;
  animation-delay: 0s;
  animation-duration: 1s;
  animation-iteration-count: "infinite";
  animation-fill-mode: forwards;
}
 {% comment %} - const all_avatar = item.reduce((element, list) => list.avatar)
                    img.avatar(src= `${all_avatar}` alt='Avatar') {% endcomment %}
                    {% comment %} img.avatar(src= `${item.avatar}` alt='Avatar') {% endcomment %}
SLACK_TOKEN=xoxp-4174455856583-4542826968518-4540277858439-0ecf2a52b4c8fb3af04f8d2bc43849bf
SLACK_BOT_TOKEN=xoxb-4174455856583-4548221733238-jxSGtzSN8VjvTGJv32y7dWmT

  //- each item in items